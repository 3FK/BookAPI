@page "/authors/view/{Id}"

@inject IAuthorRepository _authorRepository
@inject NavigationManager _navManager

<h3 class="card-title">Author detail</h3>
@if (Model == null)
{
    <Messages Message="Loading...." ClassName="alert-dismissible alert-secondary" />
}
else
{
    <div class="col-md-6">
        <h4>Author Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>First Name</td>
                <td>@Model.Firstname</td>
            </tr>
            <tr>
                <td>Last Name</td>
                <td>@Model.Lastname</td>
            </tr>
            <tr>
                <td>Biography</td>
                <td>@Model.Bio</td>
            </tr>
        </table>

        @if (Model.Books == null || Model.Books.Count < 1)
        {
            <div class="alert alert-dismissible alert-secondary">
                No books for this author
            </div>
        }
        else
        {
            <div class="card" style="width:18rem">
                <div class="card-header">
                    <h4>Author's books</h4>
                    <ul class="list-group list-group-flush">
                        @foreach (var book in Model.Books)
                        {
                            <li class="list-group-item">@book.Title - @book.Price</li>
                        }
                    </ul>
                </div>
            </div>
        }
    </div>

}

<button class="btn btn-outline-secondary" @onclick="hOnGoBack">Author List</button>



@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();

    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await _authorRepository.Get(Endpoints.AuthorsEndpoint, id);
    }
    private void hOnGoBack()
    {
        _navManager.NavigateTo("/authors/");
    }
}
