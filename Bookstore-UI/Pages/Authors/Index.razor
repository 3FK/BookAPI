    @page "/authors/"

    @inject NavigationManager _navManager
    @inject IAuthorRepository _authorRepository


    <h3 class="card-title">Authors</h3>

    @if (Model == null)
    {
        <Messages Message="Loading...." ClassName="alert-dismissible alert-secondary" />
    }
    else
    {
    <AuthorizeView Roles="Administrator">
        <a href="/authors/create" class="btn btn-primary">Create Author</a>
    </AuthorizeView>
        @if (Model.Count < 1)
        {
            <Messages Message="Loading...." ClassName="No Authors found" />
        }
        else
        {
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var author in Model)
                    {
                        <tr>
                            <td>@author.Firstname</td>
                            <td>@author.Lastname</td>
                            <td>
                                <a href="/authors/view/@author.Id" class="btn btn-primary">
                                    <span class="oi oi-book" />

                                </a>
                                <AuthorizeView Roles="Administrator">
                                    <a href="/authors/edit/@author.Id" class="btn btn-warning">
                                        <span class="oi oi-pencil" />
                                    </a>
                                    <a href="/authors/delete/@author.Id" class="btn btn-danger">
                                        <span class="oi oi-delete " />

                                    </a>
                                </AuthorizeView>  
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }

    @code {
        private IList<Author> Model;

        protected async override Task OnInitializedAsync()
        {
            Model = await _authorRepository.Get(Endpoints.AuthorsEndpoint);
        }
    }
