@page "/login"

@using Bookstore_UI.Models
@using Bookstore_UI.Contracts

@inject IAuthenticationRepository _authRepository
@inject NavigationManager _navManager

    <div class="card">
        <h3 class="card-title">Login</h3>
        @if (isFaield)
        {
            <div class="alert alert-danger">
                <div>Login faield</div>
            </div>
        }
        <div class="card-body">
            <EditForm Model="Model" OnValidSubmit="HOnLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="user-name">User Name</label>
                    <InputText Id="user-name" class="form-control" @bind-Value="Model.UserName" />
                    <ValidationMessage For="@(() => Model.UserName)" />
                </div>
                <div class="form-group">
                    <label for="email">Email Address</label>
                    <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
                    <ValidationMessage For="@(() => Model.EmailAddress)" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
                <button type="submit" class="btn btn-primary btn-block">Login</button>
            </EditForm>
        </div>
    </div>

@code {
    private LoginModel Model = new LoginModel();
    bool isFaield = false;
    private async Task HOnLogin()
    {
        var response = await _authRepository.Login(Model);

        if (response)
        {
            _navManager.NavigateTo("/");
        }
        else
        {
            isFaield = true;
        }
    }
}
