@page "/Register"

@inject IAuthenticationRepository _authRepository
@inject NavigationManager _navManager

<h3 class="card-title">Register Now</h3>
@if (isFaield)
{
    <Messages Message="Registration faield" ClassName="alert-danger" />
}
<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HOnRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="user-name">User Name</label>
            <InputText Id="user-name" class="form-control" @bind-Value="Model.UserName" />
            <ValidationMessage For="@(() => Model.UserName)" />
        </div>
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
            <ValidationMessage For="@(() => Model.EmailAddress)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>
        <div class="form-group">
            <label for="confirm-password">Confirm Password</label>
            <InputText Id="confirm-password" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
            <ValidationMessage For="@(() => Model.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary btn-block">Submit</button>
    </EditForm>
</div>


@code {
    private RegistrationModel Model = new RegistrationModel();
    bool isFaield = false;
    private async Task HOnRegister()
    {
        var response = await _authRepository.Register(Model);

        if (response)
        {
            _navManager.NavigateTo("/login");
        } else
        {
            isFaield = true;
        }
    }
}
