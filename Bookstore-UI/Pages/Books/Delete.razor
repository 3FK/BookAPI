@page "/books/delete/{Id}"
@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _bookRepository
@inject NavigationManager _navManager
@inject IFileUpload _fileUpload

<h3 class="card-title">Delete author</h3>
@if (isFailed)
{
    <Messages Message="Faield to delete the book" ClassName="alert-danger" />
}
@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <Messages Message="Invalid selection" ClassName="alert-danger" />
} else if (Model == null)
{
    <Messages Message="Loading...." ClassName="alert-dismissible alert-secondary" />
}
else
{
<div class="row">
    <div class="col-6">
        <table class="table table-responsive">
            <tr>
                <td>Title</td>
                <td>@Model.Title</td>
            </tr>
            <tr>
                <td>ISBN</td>
                <td>@Model.Isbn</td>
            </tr>
            <tr>
                <td>Author</td>
                @if (Model.Author == null)
                {
                    <td>No Author</td>
                }
                else
                {
                    <td>
                        <a href="/authors/view/@Model.AuthorId">@Model.Author.Firstname @Model.Author.Lastname</a>
                    </td>
                }
            </tr>
            <tr>
                <td>Year</td>
                <td>@Model.Year</td>
            </tr>
            <tr>
                <td>Summary</td>
                <td>@Model.Summary</td>
            </tr>
        </table>
    </div>
    <div class="col-4">
        <img src="uploads/@Model.Image" style="height: 300px; width: 300px;" />
        <h3 class="text-center text-info">@string.Format("{0:C}", Model.Price)</h3>
    </div>
</div> 

}
<button class="btn btn-danger" @onclick="HOnDelete">Delete Book</button>
<button class="btn btn-outline-secondary" @onclick="hOnGoBack">Book List</button>

@code {
    [Parameter]
    public string Id { get; set; }

    private Book Model = new Book();
    private bool isFailed = false;

    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await _bookRepository.Get(Endpoints.BooksEndpoint, id);
    }
    private void hOnGoBack()
    {
        _navManager.NavigateTo("/books/");
    }

    private async Task HOnDelete()
    {
        _fileUpload.RemoveFile(Model.Image); 
        bool response = await _bookRepository.Delete(Endpoints.BooksEndpoint, Model.Id);

        if (response)
        {
            hOnGoBack();
        }
        else
        {
            isFailed = true;
        }

    }
}
